'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

function _avaThrowsHelperStart(t, assertion, file, line) {
  if (t._throwsArgStart) {
    t._throwsArgStart(assertion, file, line);
  }
}

function _avaThrowsHelperEnd(t, arg) {
  if (t._throwsArgEnd) {
    t._throwsArgEnd();
  }

  return arg;
}

const test = require('ava');

const stringCalculator = require('./string-calculator');

test('Empty string return 0', t => {
  t.is(stringCalculator(''), 0, `The string is not empty but return ${stringCalculator('')}`);
});

test('String with 1 value return the input value', t => {
  t.is(stringCalculator('1'), 1, `The string return ${stringCalculator('1')} instead of 1`);
});

test('String with 2 values return the input values', t => {
  t.is(stringCalculator('1,2'), 3, `The string return ${stringCalculator('1,2')} instead of 3`);
});

test('Handle an unknown amount of numbers', t => {
  t.is(stringCalculator('1,2,3,4,5,6,7,8'), 36, `The string return ${stringCalculator('1,2,3,4,5,6,7,8')} instead of 36`);
});

test('handle new lines between numbers', t => {
  t.is(stringCalculator('1\n2,3'), 6, `The string return ${stringCalculator('1\n2,3')} instead of 6`);
});

test('handle new lines between numbers - should not work', t => {
  t.is(stringCalculator('1,\n'), NaN, `The string return ${stringCalculator('1,\n')} instead of NaN`);
});

test('support different delimiters n. 1', t => {
  t.is(stringCalculator('//;\n1;2'), 3, `The string return ${stringCalculator('//;\n1;2')} instead of 3`);
});

test('support different delimiters n. 2', t => {
  t.is(stringCalculator('//-\n1-2-5\n7-9'), 24, `The string return ${stringCalculator('//-\n1-2-5\n7-9')} instead of 24`);
});

test('negative numbers are not allowed n. 1', t => {
  var _rec = new _powerAssertRecorder();

  const errorMessage = t.throws((_avaThrowsHelperStart(t, 'throws', '/home/filippo/workspace/string-exercise/test.js', 38), _avaThrowsHelperEnd(t, () => {
    stringCalculator('1,4,-1');
  })));
  t.true(_rec._expr(_rec._capt(_rec._capt(_rec._capt(errorMessage, 'arguments/0/left/object').message, 'arguments/0/left') === 'negatives not allowed: -1', 'arguments/0'), {
    content: 't.true(errorMessage.message === \'negatives not allowed: -1\')',
    filepath: 'test.js',
    line: 39,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"errorMessage","range":[7,19]},"property":{"type":"Identifier","name":"message","range":[20,27]},"computed":false,"range":[7,27]},"right":{"type":"StringLiteral","value":"negatives not allowed: -1","range":[32,59]},"range":[7,59]}],"range":[0,60]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"errorMessage","range":[7,19]},{"type":{"label":"."},"range":[19,20]},{"type":{"label":"name"},"value":"message","range":[20,27]},{"type":{"label":"==/!="},"value":"===","range":[28,31]},{"type":{"label":"string"},"value":"negatives not allowed: -1","range":[32,59]},{"type":{"label":")"},"range":[59,60]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
});

test('negative numbers are not allowed n. 2', t => {
  var _rec2 = new _powerAssertRecorder();

  const errorMessage = t.throws((_avaThrowsHelperStart(t, 'throws', '/home/filippo/workspace/string-exercise/test.js', 43), _avaThrowsHelperEnd(t, () => {
    stringCalculator('//-\n1-4-1--6--5');
  })));
  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(errorMessage, 'arguments/0/left/object').message, 'arguments/0/left') === 'negatives not allowed: -6,-5', 'arguments/0'), {
    content: 't.true(errorMessage.message === \'negatives not allowed: -6,-5\')',
    filepath: 'test.js',
    line: 44,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"errorMessage","range":[7,19]},"property":{"type":"Identifier","name":"message","range":[20,27]},"computed":false,"range":[7,27]},"right":{"type":"StringLiteral","value":"negatives not allowed: -6,-5","range":[32,62]},"range":[7,62]}],"range":[0,63]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"errorMessage","range":[7,19]},{"type":{"label":"."},"range":[19,20]},{"type":{"label":"name"},"value":"message","range":[20,27]},{"type":{"label":"==/!="},"value":"===","range":[28,31]},{"type":{"label":"string"},"value":"negatives not allowed: -6,-5","range":[32,62]},{"type":{"label":")"},"range":[62,63]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
});

test('numbers bigger than 1000 should be ignored n. 1', t => {
  t.is(stringCalculator('//-\n1000-2-5\n1111-9'), 16, `The string return ${stringCalculator('//-\n1000-2-5\n1111-9')} instead of 16`);
});
//# sourceMappingURL=/home/filippo/workspace/string-exercise/node_modules/.cache/ava/fc0bb54879a5d980f15571799ace4366.js.map