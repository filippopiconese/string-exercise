{"version":3,"sources":["test.js"],"names":["test","require","stringCalculator","t","is","NaN","errorMessage","throws","true","message"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;;AAEA,MAAMC,mBAAmBD,QAAQ,qBAAR,CAAzB;;AAEAD,KAAK,uBAAL,EAA8BG,KAAK;AACjCA,IAAEC,EAAF,CAAKF,iBAAiB,EAAjB,CAAL,EAA2B,CAA3B,EAA+B,sCAAqCA,iBAAiB,EAAjB,CAAqB,EAAzF;AACD,CAFD;;AAIAF,KAAK,4CAAL,EAAmDG,KAAK;AACtDA,IAAEC,EAAF,CAAKF,iBAAiB,GAAjB,CAAL,EAA4B,CAA5B,EAAgC,qBAAoBA,iBAAiB,GAAjB,CAAsB,eAA1E;AACD,CAFD;;AAIAF,KAAK,8CAAL,EAAqDG,KAAK;AACxDA,IAAEC,EAAF,CAAKF,iBAAiB,KAAjB,CAAL,EAA8B,CAA9B,EAAkC,qBAAoBA,iBAAiB,KAAjB,CAAwB,eAA9E;AACD,CAFD;;AAIAF,KAAK,qCAAL,EAA4CG,KAAK;AAC/CA,IAAEC,EAAF,CAAKF,iBAAiB,iBAAjB,CAAL,EAA0C,EAA1C,EAA+C,qBAAoBA,iBAAiB,iBAAjB,CAAoC,gBAAvG;AACD,CAFD;;AAIAF,KAAK,kCAAL,EAAyCG,KAAK;AAC5CA,IAAEC,EAAF,CAAKF,iBAAiB,QAAjB,CAAL,EAAiC,CAAjC,EAAqC,qBAAoBA,iBAAiB,QAAjB,CAA2B,eAApF;AACD,CAFD;;AAIAF,KAAK,oDAAL,EAA2DG,KAAK;AAC9DA,IAAEC,EAAF,CAAKF,iBAAiB,MAAjB,CAAL,EAA+BG,GAA/B,EAAqC,qBAAoBH,iBAAiB,MAAjB,CAAyB,iBAAlF;AACD,CAFD;;AAIAF,KAAK,mCAAL,EAA0CG,KAAK;AAC7CA,IAAEC,EAAF,CAAKF,iBAAiB,UAAjB,CAAL,EAAmC,CAAnC,EAAuC,qBAAoBA,iBAAiB,UAAjB,CAA6B,eAAxF;AACD,CAFD;;AAIAF,KAAK,mCAAL,EAA0CG,KAAK;AAC7CA,IAAEC,EAAF,CAAKF,iBAAiB,iBAAjB,CAAL,EAA0C,EAA1C,EAA+C,qBAAoBA,iBAAiB,iBAAjB,CAAoC,gBAAvG;AACD,CAFD;;AAIAF,KAAK,uCAAL,EAA8CG,KAAK;AAAA;;AACjD,QAAMG,eAAeH,EAAEI,MAAF,oHAAS,MAAM;AAAEL,qBAAiB,QAAjB;AAA4B,GAA7C,GAArB;AACAC,IAAEK,IAAF,uBAAO,+DAAaC,OAAb,0BAAyB,2BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAHD;;AAKAT,KAAK,uCAAL,EAA8CG,KAAK;AAAA;;AACjD,QAAMG,eAAeH,EAAEI,MAAF,oHAAS,MAAM;AAAEL,qBAAiB,kBAAjB;AAAsC,GAAvD,GAArB;AACAC,IAAEK,IAAF,yBAAO,iEAAaC,OAAb,0BAAyB,8BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAHD;;AAKAT,KAAK,iDAAL,EAAwDG,KAAK;AAC3DA,IAAEC,EAAF,CAAKF,iBAAiB,uBAAjB,CAAL,EAAgD,EAAhD,EAAqD,qBAAoBA,iBAAiB,uBAAjB,CAA0C,gBAAnH;AACD,CAFD;;AAIAF,KAAK,uCAAL,EAA8CG,KAAK;AAAA;;AACjD,QAAMG,eAAeH,EAAEI,MAAF,oHAAS,MAAM;AAAEL,qBAAiB,qBAAjB;AAAyC,GAA1D,GAArB;AACAC,IAAEK,IAAF,yBAAO,iEAAaC,OAAb,0BAAyB,8BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAHD","file":"test.js","sourcesContent":["const test = require('ava')\n\nconst stringCalculator = require('./string-calculator')\n\ntest('Empty string return 0', t => {\n  t.is(stringCalculator(''), 0, `The string is not empty but return ${stringCalculator('')}`)\n})\n\ntest('String with 1 value return the input value', t => {\n  t.is(stringCalculator('1'), 1, `The string return ${stringCalculator('1')} instead of 1`)\n})\n\ntest('String with 2 values return the input values', t => {\n  t.is(stringCalculator('1,2'), 3, `The string return ${stringCalculator('1,2')} instead of 3`)\n})\n\ntest('Handle an unknown amount of numbers', t => {\n  t.is(stringCalculator('1,2,3,4,5,6,7,8'), 36, `The string return ${stringCalculator('1,2,3,4,5,6,7,8')} instead of 36`)\n})\n\ntest('handle new lines between numbers', t => {\n  t.is(stringCalculator('1\\n2,3'), 6, `The string return ${stringCalculator('1\\n2,3')} instead of 6`)\n})\n\ntest('handle new lines between numbers - should not work', t => {\n  t.is(stringCalculator('1,\\n'), NaN, `The string return ${stringCalculator('1,\\n')} instead of NaN`)\n})\n\ntest('support different delimiters n. 1', t => {\n  t.is(stringCalculator('//;\\n1;2'), 3, `The string return ${stringCalculator('//;\\n1;2')} instead of 3`)\n})\n\ntest('support different delimiters n. 2', t => {\n  t.is(stringCalculator('//-\\n1-2-5\\n7-9'), 24, `The string return ${stringCalculator('//-\\n1-2-5\\n7-9')} instead of 24`)\n})\n\ntest('negative numbers are not allowed n. 1', t => {\n  const errorMessage = t.throws(() => { stringCalculator('1,4,-1') })\n  t.true(errorMessage.message === 'negatives not allowed: -1')\n})\n\ntest('negative numbers are not allowed n. 2', t => {\n  const errorMessage = t.throws(() => { stringCalculator('//-\\n1-4-1--6--5') })\n  t.true(errorMessage.message === 'negatives not allowed: -6,-5')\n})\n\ntest('numbers bigger than 1000 should be ignored n. 1', t => {\n  t.is(stringCalculator('//-\\n1000-2-5\\n1111-9'), 16, `The string return ${stringCalculator('//-\\n1000-2-5\\n1111-9')} instead of 16`)\n})\n\ntest('negative numbers are not allowed n. 2', t => {\n  const errorMessage = t.throws(() => { stringCalculator('//-\\n1-4-1001--6--5') })\n  t.true(errorMessage.message === 'negatives not allowed: -1001')\n})\n"]}