'use strict';

const test = require('ava');

const stringCalculator = require('./string-calculator');

test('Empty string return 0', t => {
  t.is(stringCalculator(''), 0, `The string is not empty but return ${stringCalculator('')}`);
});

test('String with value return the input value', t => {
  t.is(stringCalculator('1'), 1, `The string return ${stringCalculator('1')} instead of 1`);
});

test('String with two values return the input values', t => {
  t.is(stringCalculator('1,2'), 3, `The string return ${stringCalculator('1,2')} instead of 3`);
});

test('Handle an unknown amount of numbers', t => {
  t.is(stringCalculator('1,2,3,4,5,6,7,8'), 36, `The string return ${stringCalculator('1,2,3,4,5,6,7,8')} instead of 36`);
});

test('handle new lines between numbers', t => {
  t.is(stringCalculator('1\n2,3'), 6, `The string return ${stringCalculator('1\n2,3')} instead of 6`);
});

test('handle new lines between numbers - should not work', t => {
  t.is(stringCalculator('1,\n'), NaN, `The string return ${stringCalculator('1,\n')} instead of NaN`);
});

// test('support different delimiters', t => {
// t.is(stringCalculator('//;\n1;2'), 3, `The string return ${stringCalculator('//;\n1;2')} instead of 3`)
// })

/*
test('should not work', t => {
  t.is(stringCalculator('1,\n'), NaN, `The string return ${stringCalculator('1,\n')} instead of NaN`)
})
*/
//# sourceMappingURL=/home/filippo/workspace/string-exercise/node_modules/.cache/ava/5ce902b551cce6c82166b4a611e589b5.js.map