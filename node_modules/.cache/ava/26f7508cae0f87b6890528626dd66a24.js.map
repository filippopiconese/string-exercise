{"version":3,"sources":["test.js"],"names":["test","require","stringCalculator","t","is"],"mappings":";;AAAA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;;AAEA,MAAMC,mBAAmBD,QAAQ,qBAAR,CAAzB;;AAEAD,KAAK,uBAAL,EAA8BG,KAAK;AACjCA,IAAEC,EAAF,CAAKF,iBAAiB,EAAjB,CAAL,EAA2B,CAA3B,EAA+B,sCAAqCA,iBAAiB,EAAjB,CAAqB,EAAzF;AACD,CAFD;;AAIAF,KAAK,0CAAL,EAAiDG,KAAK;AACpDA,IAAEC,EAAF,CAAKF,iBAAiB,GAAjB,CAAL,EAA4B,CAA5B,EAAgC,qBAAoBA,iBAAiB,GAAjB,CAAsB,eAA1E;AACD,CAFD;;AAIAF,KAAK,gDAAL,EAAuDG,KAAK;AAC1DA,IAAEC,EAAF,CAAKF,iBAAiB,KAAjB,CAAL,EAA8B,CAA9B,EAAkC,qBAAoBA,iBAAiB,KAAjB,CAAwB,eAA9E;AACD,CAFD","file":"test.js","sourcesContent":["const test = require('ava')\n\nconst stringCalculator = require('./string-calculator')\n\ntest('Empty string return 0', t => {\n  t.is(stringCalculator(''), 0, `The string is not empty but return ${stringCalculator('')}`)\n})\n\ntest('String with value return the input value', t => {\n  t.is(stringCalculator('1'), 1, `The string return ${stringCalculator('1')} instead of 1`)\n})\n\ntest('String with two values return the input values', t => {\n  t.is(stringCalculator('1,2'), 1, `The string return ${stringCalculator('1,2')} instead of 3`)\n})\n"]}